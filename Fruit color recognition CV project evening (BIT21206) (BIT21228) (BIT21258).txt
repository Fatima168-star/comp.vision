Fruit Color Recognition Project
1-main.m
2-colorSegmentation.m
3-extractFeatures.m
4-fruitColorRecognitionGUI.m
5-fruit_image.jpg  (your sample fruit image)


 Explanation of the Fruit Color Recognition Project

This project is designed to recognize the dominant color of a fruit in an image using MATLAB. The project is divided into four main parts:

1. Image Acquisition and Preprocessing**
2. Color Segmentation**
3. Feature Extraction and Classification**
4. Graphical User Interface (GUI)**

1. Image Acquisition and Preprocessing**

- Purpose**: To load the image of the fruit and convert it into a format suitable for color-based segmentation.
- What happens in the code:
  - The image of the fruit is loaded from the file system using the `imread` function (`main.m` script).
  - The image is resized to make the processing faster (`imresize`).
  - The image is converted from RGB (Red-Green-Blue) color space to HSV (Hue-Saturation-Value) color space using the `rgb2hsv` function. The HSV color space is commonly used for color-based segmentation because the Hue channel directly represents the color.

### 2. Color Segmentation**

- Purpose: To segment the image into regions corresponding to different fruit colors (e.g., red, green, yellow).
- What happens in the code**:
  - The Hue channel of the HSV image is extracted.
  - Based on the hue values, the image is divided into different color masks:
    - Red mask: Extracts pixels that fall within the hue range for the color red (defined as `0.0 <= hue <= 0.05`).
    - Green mask: Extracts pixels that fall within the hue range for green (defined as `0.25 <= hue <= 0.45`).
    - Yellow mask: Extracts pixels that fall within the hue range for yellow (defined as `0.12 <= hue <= 0.2`).
  - Morphological Operations are applied (`imopen` function) to clean up the color masks, removing small noise and smoothing the regions.

### 3. Feature Extraction and Classification

- Purpose: To classify the dominant color of the fruit by comparing the areas of the segmented color masks.
- What happens in the code:
  - The areas (or number of pixels) in each color mask (Red, Green, and Yellow) are calculated using `sum(mask(:))`.
  - The mask with the **largest area is considered to represent the dominant color of the fruit.
  - Based on the largest area, the fruit is classified as **Red**, **Green**, **Yellow**, or **Unknown** if no dominant color is found.

 4. Graphical User Interface (GUI)**

- Purpose: To allow the user to interact with the program and process fruit images through a simple GUI.
- What happens in the code:
  - A GUI is created using the `uifigure` function.
  - The user can click the "Load and Process Image" button to choose an image file from their computer using the `uigetfile` function.
  - Once an image is selected, the program automatically processes it, segments the colors, and classifies the dominant color.
  - The result is displayed in a pop-up alert using `uialert`, showing the detected fruit color (Red, Green, Yellow).

---

Detailed Walkthrough of Key Functions

1. `main.m`
- Purpose: This is the main script that controls the flow of the project.
- Flow:
  1. It loads an image using `imread`.
  2. It calls the `colorSegmentation` function to create masks for red, green, and yellow.
  3. It calls the `extractFeatures` function to determine the dominant color.
  4. It displays the image with the detected color in a new figure.

2. `colorSegmentation.m`
- Purpose: Segments the image based on the fruit color by creating color masks.
- Flow:
  1. The function converts the image to the HSV color space and extracts the Hue channel.
  2. It defines thresholds for red, green, and yellow colors in the Hue channel.
  3. It creates binary masks (red_mask, green_mask, yellow_mask) based on whether each pixel's Hue value lies within the defined color range.
  4. Morphological operations (such as `imopen`) are applied to clean up the masks by removing noise.
  5. The function returns the cleaned-up masks.

3. `extractFeatures.m`
- Purpose: Analyzes the color masks and classifies the dominant color.
- low:
  1. It calculates the area (number of pixels) of the red, green, and yellow masks by summing up the pixels in each mask.
  2. It compares the areas and determines which color (Red, Green, Yellow) occupies the largest area.
  3. It returns the dominant color as a string (`'Red'`, `'Green'`, `'Yellow'`, or `'Unknown'` if no clear color is detected).

#### 4. `fruitColorRecognitionGUI.m`
- Purpose: Provides a graphical user interface for the user to interact with the program.
- Flow:
  1. The GUI is created using `uifigure` and displays a button.
  2. When the user clicks the "Load and Process Image" button, the `uigetfile` function is called to allow the user to select an image file.
  3. The selected image is processed by the `colorSegmentation` and `extractFeatures` functions.
  4. The result is displayed in a pop-up alert showing the detected fruit color.

---

 Example Workflow

1. Run the GUI: The user runs the `fruitColorRecognitionGUI.m` script to open a simple interface.
2. Load an Image: The user clicks the "Load and Process Image" button to select an image file of a fruit.
3. Processing: The program processes the image by:
   - Converting it to the HSV color space.
   - Segmenting the image based on color ranges for red, green, and yellow.
   - Calculating the area of each color region.
   - Identifying the color with the largest region as the dominant fruit color.
4. Result: The program displays a pop-up message showing the detected fruit color (e.g., "The detected fruit color is: Red").

---

 Key Concepts and Techniques Used

1. HSV Color Space: 
   - HSV separates chromatic content (Hue) from intensity (Saturation and Value). The Hue channel is particularly useful for detecting colors independently of lighting conditions.
   
2. Color Segmentation:
   - This technique involves isolating specific colors within an image. By setting specific thresholds for Hue values, the image is segmented into different color regions.
   
3. Morphological Operations:
   - Morphological operations such as opening (`imopen`) are used to clean up the binary masks, removing small noise or unwanted regions.

4. Feature Extraction:
   - Feature extraction here refers to calculating the area (number of pixels) corresponding to each color mask. The largest area is assumed to correspond to the dominant color.

5. Graphical User Interface (GUI):
   - The GUI uses MATLABâ€™s `uifigure` to create a user-friendly interface where users can interact with the program and process images without writing any code.

---

Possible Improvements

1. Multi-Color Support: The project currently detects only red, green, and yellow fruits. You can expand this by adding more color ranges (e.g., orange, purple, etc.).
2. Machine Learning: Instead of using simple color thresholds, you could train a machine learning classifier (such as SVM, KNN, or a neural network) on a labeled dataset to classify fruits more accurately, taking into account not just color but also texture and shape.
3. User Interface Enhancements: You can enhance the GUI by showing both the original and processed images side by side, or providing options to adjust the color thresholds dynamically.

This project is a good starting point for fruit color recognition and can be expanded with more sophisticated techniques for real-world applications like agriculture or fruit sorting systems.
